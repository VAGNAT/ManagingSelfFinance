@if (_displayEdit)
{
    <div class="modal-backdrop show"></div>
    <EditForm class="modal fade show" tabindex="-1" aria-hidden="true" style="display: block" Model="@Expense" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="modal-content container" role="document">
            <div class="modal-header">
                    <h5 class="modal-title">@Title</h5>                    
                </div>
            <div class="form-group modal-body">
                <label>Date:</label>
                <div class="">
                    <InputDate class="form-control" @bind-Value="Expense.Date" />
                    <ValidationMessage For="@(() => Expense.Date)"></ValidationMessage>
                </div>
            </div>
            <div class="form-group modal-body">
                <label>Type:</label>
                <div>
                    <InputSelect class="form-select" @bind-Value="Expense.TypeExpenseId">
                        @foreach (TypeExpense item in TypeExpenses)
                        {
                        <option value=@item.Id>@item.Name</option>
                        }
                </InputSelect>
                <ValidationMessage For="@(() => Expense.TypeExpense)"></ValidationMessage>
            </div>
        </div>
        <div class="form-group modal-body">
            <label>Amount:</label>
            <div class="">
                <InputNumber class="form-control" @bind-Value="Expense.Amount" />
                <ValidationMessage For="@(() => Expense.Amount)"></ValidationMessage>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn btn-primary" type="submit">Save Changes</button>
            <button @onclick="OnCancel" type="button" class="btn btn-secondary">Cancel</button>
        </div>
    </div>
</EditForm>
}

@code {
    [Parameter] public string Title { get; set; } = "Change expense";
    [Parameter] public Expense? Expense { get; set; }
    [Parameter] public IEnumerable<TypeExpense>? TypeExpenses { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    private bool _displayEdit = false;    
    public void Show() => _displayEdit = true;
    public void Hide() => _displayEdit = false;    
}
